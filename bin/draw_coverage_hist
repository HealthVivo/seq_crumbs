#!/usr/bin/env python

'It draws a histogram with the coverage of a bam file'

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of bam_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
from array import array

from crumbs.utils.bin_utils import main, build_version_msg
from bam_crumbs.statistics import get_genome_coverage, counter_to_scatter_group
from bam_crumbs.plot import draw_scatter, draw_histogram


def _setup_argparse():
    'It returns the argument parser'
    description = 'Draw coverage histogram'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help='BAM or SAM file to process',
                        type=argparse.FileType('rt'), nargs='*')
    parser.add_argument('-o', '--outfile', dest='outfile',
                help='Output file. File to write the graph',
                type=argparse.FileType('wt'))
    parser.add_argument('-m', '--xlim_left', default=0, type=int,
                        help='Limit of the x axes in the left')
    parser.add_argument('-M', '--xlim_rigth', type=int,
                        help='Limit of the x axes in the rigth')
    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'

    parsed_args = parser.parse_args()
    in_fhands = parsed_args.input
    out_fhand = getattr(parsed_args, 'outfile')
    xlim = (parsed_args.xlim_left,  parsed_args.xlim_rigth)
    return {'in_fhands': in_fhands, 'out_fhand': out_fhand, 'xlim': xlim}


def filter_scatter_groups(group, xlim=None):
    if xlim is None:
        return group
    left, rigth = xlim
    if rigth is None:
        rigth = max(group['x'])
    filtered_group = {'x': array('l'), 'y': array('l')}
    for x, y in zip(group['x'], group['y']):
        if x < left or x > rigth:
            continue
        filtered_group['x'].append(x)
        filtered_group['y'].append(y)
    return filtered_group


def run():
    'It makes the actual job'
    parser = _setup_argparse()
    args = _parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']

    coverage_counter = get_genome_coverage(in_fhands)
    stdout = 'Minimum coverage value: {}\n'.format(coverage_counter.min)
    stdout += 'Maximum coverage value: {}\n'.format(coverage_counter.max)
    stdout += 'Median value: {}\n'.format(coverage_counter.median)
    sys.stdout.write(stdout)

    xlim = args['xlim']
    if xlim is not None:
        x_left, x_rigth = xlim
        if x_rigth is None:
            x_rigth = coverage_counter.max + 1
        xlim = (x_left, x_rigth)

    kwargs = {'title': 'Histogram of the coverage', 'xlabel': 'Coverage',
              'ylabel': 'Num. Bases with this coverage'}

    coverages = [cov for cov in coverage_counter.elements()]
    draw_histogram(coverages, out_fhand, bins=100, range_=xlim, **kwargs)


if __name__ == '__main__':
    # sys.argv.append('-h')
    sys.exit(main(run))
