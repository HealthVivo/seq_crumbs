#!/usr/bin/env python
'''
Created on 2014 ots 11

@author: peio
'''
from __future__ import division

import sys
import argparse
from bam_crumbs.statistics import mapped_count_by_rg


def _setup_argparse():
    'It returns the argument parser'
    description = 'Calculate statistics of the given files'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help='BAM or SAM file to process',
                        nargs='*')
    parser.add_argument('-o', '--outfile', default=sys.stdout, dest='outfile',
                        help='Sequence output file (default STDOUT)',
                        type=argparse.FileType('wt'))

    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'
    parsed_args = parser.parse_args()
    in_fpaths = parsed_args.input
    out_fhand = getattr(parsed_args, 'outfile')
    return in_fpaths, out_fhand


def main():
    parser = _setup_argparse()
    in_fpaths, out_fhand = _parse_args(parser)
    counts = mapped_count_by_rg(in_fpaths)
    out_fhand.write('Readgroup\tMapped\tUnmapped\t% mapped\n')
    total_mapped = 0
    total_unmapped = 0
    for rg, map_counts in counts.items():
        mapped = map_counts['mapped']
        unmapped = map_counts['unmapped']
        num_reads = mapped + unmapped
        total_mapped += mapped
        total_unmapped += unmapped

        out_fhand.write('{}\t{}\t{}\t{:.2%}\n'.format(rg, mapped, unmapped,
                                                      mapped / num_reads))
    out_fhand.write('--------------------------\n')
    out_fhand.write('Total:\t{}\t{}\t{:.2%}\n'.format(total_mapped,
                                                      total_unmapped,
                               total_mapped / (total_mapped + total_unmapped)))


if __name__ == '__main__':
    main()
