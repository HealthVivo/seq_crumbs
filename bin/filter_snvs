#!/usr/bin/env python
import sys
import argparse


from vcf import Reader, Writer
from vcf_crumbs.filters import (GenotypesInSamplesFilter,
                                AlleleNumberFilter, MissingGenotypesFilter,
                                remove_low_quality_gt)
from vcf_crumbs.statistics import get_snpcaller_name


def _setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'Filter the snvs in an indexed vcf'
    parser = argparse.ArgumentParser(description=description)
    in_help = 'Indexed vcf file'
    parser.add_argument('input', help=in_help, type=argparse.FileType('rt'))
    parser.add_argument('-o', '--output', required=True,
                        help='output vcf file', type=argparse.FileType('wt'))
    parser.add_argument('-s', '--samples_file', default=None,
                        help='File with the filter configuration')
    help1 = 'Posible genotypes in selected samples(012)'
    help1 += 'It can take a min of number called calls set with -x. '
    help1 += 'Otherwise, if all genotypes are uncalled, '
    help1 += 'the record passes the filter anyway'
    parser.add_argument('-g', '--genotypes_in_samples', default=None,
                        help=help1)
    help2 = 'Genotype quality threshold. Lower values will be transformed '
    help2 += 'into uncalled'
    parser.add_argument('-t', '--gq_threshold', default=0, type=int,
                        help=help2)
    parser.add_argument('-n', '--allele_number', default=None, type=int,
                        help='Allele number requiered to keep marker')
    parser.add_argument('-m', '--missing_genotypes', default=None, type=int,
                        help='Max number of missing genotypes allowed')
    parser.add_argument('-x', '--min_n_called', default=None, type=int,
                        help='Min number of called genotypes in -g option')
    return parser


def _parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    args = {}
    args['in_fhand'] = parsed_args.input
    if parsed_args.output is not None:
        args['out_fhand'] = parsed_args.output
    else:
        args['out_fhand'] = sys.stdout
    if parsed_args.genotypes_in_samples is None:
        args['genotypes'] = None
    else:
        args['genotypes'] = [int(n)
                          for n in parsed_args.genotypes_in_samples.split(',')]
    if parsed_args.samples_file is None:
        args['samples'] = None
    else:
        args['samples'] = [line.strip()
                                    for line in open(parsed_args.samples_file)]
    args['gq_threshold'] = parsed_args.gq_threshold
    args['n_alleles'] = parsed_args.allele_number
    args['n_missing_gt'] = parsed_args.missing_genotypes
    args['min_n_called'] = parsed_args.min_n_called
    return args


def main():
    parser = _setup_argparse()
    args = _parse_args(parser)

    reader = Reader(args['in_fhand'])
    filters = []
    if args['genotypes'] is not None:
        genotypes_in_samples = GenotypesInSamplesFilter(args['genotypes'],
                                                        args['samples'],
                                                        args['min_n_called'])
        filters.append(genotypes_in_samples)
    if args['n_alleles'] is not None:
        n_alleles_filter = AlleleNumberFilter(args['n_alleles'],
                                              args['samples'])
        filters.append(n_alleles_filter)
    if args['n_missing_gt'] is not None:
        n_missing_genotypes = MissingGenotypesFilter(args['n_missing_gt'],
                                                     args['samples'])
        filters.append(n_missing_genotypes)
    vcf_variant = get_snpcaller_name(reader)
    writer = Writer(args['out_fhand'], reader)
    for record in reader:
        record = remove_low_quality_gt(record, args['gq_threshold'],
                                       vcf_variant)
        passed = True
        for filter_ in filters:
            if not filter_(record):
                passed = False
        if passed:
            writer.write_record(record)
    writer.close()


if __name__ == '__main__':
    main()
