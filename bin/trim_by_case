#!/usr/bin/env python

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of seq_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys

from crumbs.utils import (STDIN, STDOUT, get_inputs_from_args,
                          get_output_from_args, INFILES, OUTFILE, main)
from crumbs.seqio import read_seqrecords, write_seqrecords, guess_format
from crumbs.trim import trim_lowercased_seqs


def sample_setup_argparse():
    'It prepares the command line argument parsing.'
    description = 'Get first seqs from file[s]'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument(INFILES, default=STDIN, nargs='*',
                        help="Sequence input file to process")
    parser.add_argument('-o', '--outfile', default=STDOUT, dest=OUTFILE,
                        help="Sequence output file to process")
    return parser


def sample_parse_args(parser):
    '''It parses the command line and it returns a dict with the arguments.'''
    parsed_args = parser.parse_args()
    in_fhands = get_inputs_from_args(parsed_args)
    out_fhand = get_output_from_args(parsed_args)

    return {'out_fhand': out_fhand, 'in_fhands': in_fhands}


def trim_by_case():
    'The main function of the head binary'
    parser = sample_setup_argparse()
    args = sample_parse_args(parser)

    in_fhands = args['in_fhands']
    out_fhand = args['out_fhand']

    seqs = read_seqrecords(in_fhands)
    seqs = trim_lowercased_seqs(seqs)
    write_seqrecords(out_fhand, seqs, guess_format(in_fhands[0]))

if __name__ == '__main__':
    sys.exit(main(trim_by_case))
