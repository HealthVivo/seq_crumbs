#!/usr/bin/env python

'It sorts and indexes a bam file'

# Copyright 2012 Jose Blanca, Peio Ziarsolo, COMAV-Univ. Politecnica Valencia
# This file is part of bam_crumbs.
# seq_crumbs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# seq_crumbs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with seq_crumbs. If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
import os
import subprocess
import shutil
from tempfile import NamedTemporaryFile

from bam_crumbs.settings import get_setting
from bam_crumbs.utils.bin import get_binary_path
from crumbs.utils.bin_utils import main, build_version_msg


def sort_bam(in_bam_fpath, out_bam_fpath):
    'it sorts a bam file'
    picard_tools = get_setting("PICARD_TOOLS_DIR")
    cmd = ['java', '-jar', os.path.join(picard_tools, 'SortSam.jar'),
           'INPUT={0}'.format(in_bam_fpath),
           'OUTPUT={0}'.format(out_bam_fpath),
           'SORT_ORDER=coordinate', 'VALIDATION_STRINGENCY=LENIENT']
    subprocess.check_call(cmd)


def index_bam(bam_fpath):
    'It indexes a bam file'
    samtools_binary = get_binary_path('samtools')
    subprocess.check_call([samtools_binary, 'index', bam_fpath])


def _setup_argparse():
    'It returns the argument parser'
    description = 'Calculate statistics of the given files'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('input', help='BAM or SAM file to process',
                        type=argparse.FileType('rt'))
    parser.add_argument('-o', '--outfile', dest='outfile',
                help='Output file. Use it if you want to mantain input file',
                type=argparse.FileType('wt'))
    help_msg = 'use this option if you down want to create de index after '
    help_msg += 'sorting'
    parser.add_argument('--no-index', action='store_true', dest='skip_index',
                        help=help_msg)
    parser.add_argument('--version', action='version',
                        version=build_version_msg())
    return parser


def _parse_args(parser):
    'It parses the command line and it returns a dict with the arguments.'

    parsed_args = parser.parse_args()
    in_fhand = parsed_args.input
    out_fhand = getattr(parsed_args, 'outfile')
    skip_index = parsed_args.skip_index

    args = {'out_fhand': out_fhand, 'in_fhand': in_fhand,
            'skip_index': skip_index}
    return args, parsed_args


def run():
    'It makes the actual job'
    parser = _setup_argparse()
    args = _parse_args(parser)[0]

    in_fhand = args['in_fhand']
    out_fhand = args['out_fhand']
    skip_index = args['skip_index']

    keep_same_path = False
    if out_fhand is None:
        out_fhand = NamedTemporaryFile(suffix='.bam')
        keep_same_path = True

    sort_bam(in_fhand.name, out_fhand.name)

    if keep_same_path:
        shutil.move(out_fhand.name, in_fhand.name)
        out_fpath = in_fhand.name
    else:
        out_fpath = out_fhand.name

    if not skip_index:
        index_bam(out_fpath)


if __name__ == '__main__':
    # sys.argv.append('-h')
    sys.exit(main(run))
